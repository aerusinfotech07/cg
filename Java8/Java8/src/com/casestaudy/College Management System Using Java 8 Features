### College Management System Using Java 8 Features

#### 1. **Overview**

The **College Management System (CMS)** helps manage various college operations, including student enrollment, faculty management, course schedules, grades, and exams. By leveraging **Java 8 features** such as **Streams**, **Optional**, **Lambda Expressions**, and **Functional Interfaces**, we can create a more efficient and concise system with improved readability and performance.

---

#### 2. **Key Functional Requirements**
- **Student Management**: Register and manage students, view academic records.
- **Faculty Management**: Manage faculty profiles, view assigned courses.
- **Course Management**: Manage course offerings and enrollment.
- **Grade Management**: Record and retrieve student grades.
- **Exam Management**: Schedule exams and retrieve exam schedules.

---

#### 3. **System Design Using Java 8**

##### **Entities**

1. **Student**:
   - `studentId`: Unique identifier
   - `name`: Full name of the student
   - `age`
   - `email`
   - `courses`: List of courses the student is enrolled in
   
2. **Faculty**:
   - `facultyId`: Unique identifier
   - `name`: Faculty name
   - `specialization`: Area of expertise
   - `courses`: List of courses assigned to the faculty
   
3. **Course**:
   - `courseId`: Unique identifier
   - `name`: Course name
   - `facultyId`: Assigned faculty
   - `credits`: Number of credits for the course
   
4. **Grade**:
   - `gradeId`: Unique identifier
   - `studentId`: Student reference
   - `courseId`: Course reference
   - `grade`: Grade awarded to the student

5. **Exam**:
   - `examId`: Unique identifier
   - `courseId`: Course reference
   - `date`: Exam date
   - `time`: Exam time

---

#### 4. **Java 8 Features Usage**

##### **Lambda Expressions**
Lambda expressions simplify method implementations, making the code more concise and readable. For example, to sort students by name, we can use:

```java
students.sort((Student s1, Student s2) -> s1.getName().compareTo(s2.getName()));
```

Or even shorter with method reference:

```java
students.sort(Comparator.comparing(Student::getName));
```

##### **Stream API**
Streams provide a powerful way to manipulate collections of data, allowing us to filter, map, and collect data in a functional style.

**Example: Filtering Students by a Course**
```java
List<Student> enrolledStudents = students.stream()
    .filter(student -> student.getCourses().contains(courseId))
    .collect(Collectors.toList());
```

##### **Optional**
`Optional` is used to handle cases where values might be `null`, reducing the need for null checks and preventing `NullPointerException`.

**Example: Safely Get Faculty**
```java
Optional<Faculty> faculty = faculties.stream()
    .filter(f -> f.getFacultyId() == facultyId)
    .findFirst();
    
faculty.ifPresent(f -> System.out.println(f.getName()));
```

##### **Method References**
Method references in Java 8 allow referencing methods directly without needing to invoke them manually.

**Example: Listing Faculty Names**
```java
faculties.stream()
    .map(Faculty::getName)
    .forEach(System.out::println);
```

---

#### 5. **Functional Requirements Implementation with Java 8**

##### **Student Management**
1. **Register Student**
   ```java
   students.add(new Student(1, "John Doe", 21, "john@example.com", Arrays.asList(101, 102)));
   ```

2. **View All Students**
   ```java
   students.forEach(System.out::println);
   ```

3. **Filter Students Enrolled in a Specific Course**
   ```java
   List<Student> enrolledInCourse = students.stream()
       .filter(student -> student.getCourses().contains(courseId))
       .collect(Collectors.toList());
   ```

##### **Faculty Management**
1. **Add Faculty**
   ```java
   faculties.add(new Faculty(1, "Dr. Jane Smith", "Computer Science", Arrays.asList(101, 103)));
   ```

2. **View All Faculty**
   ```java
   faculties.forEach(System.out::println);
   ```

3. **Find Faculty by Specialization**
   ```java
   faculties.stream()
       .filter(faculty -> "Computer Science".equals(faculty.getSpecialization()))
       .forEach(System.out::println);
   ```

##### **Course Management**
1. **Add Course**
   ```java
   courses.add(new Course(101, "Data Structures", 1, 3));
   ```

2. **View All Courses**
   ```java
   courses.forEach(System.out::println);
   ```

3. **Find Courses Taught by a Faculty Member**
   ```java
   List<Course> facultyCourses = courses.stream()
       .filter(course -> course.getFacultyId() == facultyId)
       .collect(Collectors.toList());
   ```

##### **Grade Management**
1. **Assign Grade to a Student**
   ```java
   grades.add(new Grade(1, studentId, courseId, "A"));
   ```

2. **Retrieve Grades for a Specific Student**
   ```java
   List<Grade> studentGrades = grades.stream()
       .filter(grade -> grade.getStudentId() == studentId)
       .collect(Collectors.toList());
   ```

3. **Calculate Average Grade for a Student**
   ```java
   double averageGrade = grades.stream()
       .filter(grade -> grade.getStudentId() == studentId)
       .mapToDouble(grade -> convertGradeToGPA(grade.getGrade()))
       .average()
       .orElse(0.0);
   ```

##### **Exam Management**
1. **Schedule an Exam**
   ```java
   exams.add(new Exam(1, 101, LocalDate.of(2024, 9, 20), LocalTime.of(10, 0)));
   ```

2. **View All Exams for a Course**
   ```java
   exams.stream()
       .filter(exam -> exam.getCourseId() == courseId)
       .forEach(System.out::println);
   ```

---

#### 6. **Database Design**

For simplicity, data can be stored in collections (lists). However, in a real-world application, these entities would be stored in a database using technologies like JPA.

**Student Table**:
- **Columns**: `studentId`, `name`, `age`, `email`

**Faculty Table**:
- **Columns**: `facultyId`, `name`, `specialization`

**Course Table**:
- **Columns**: `courseId`, `name`, `facultyId`, `credits`

**Grade Table**:
- **Columns**: `gradeId`, `studentId`, `courseId`, `grade`

**Exam Table**:
- **Columns**: `examId`, `courseId`, `date`, `time`

---

#### 7. **Technology Stack**

- **Java 8**: Using the latest features such as lambdas, streams, method references, and Optional.
- **Database**: MySQL, PostgreSQL (or in-memory collections for demonstration).
- **Framework**: Spring Boot for building APIs, JPA for ORM (if connected to a database).

---

#### 8. **Example of a Complete Workflow Using Java 8**

1. **Register a Student**: The student is registered and added to a list.
2. **Assign Courses**: The student is assigned to different courses, which are stored in their profile.
3. **Assign Grades**: After the courses, grades are assigned to the student and stored in a `grades` list.
4. **View Grades**: A report is generated showing the student's grades for each course.

---

### Conclusion

By leveraging **Java 8 features** such as **Streams**, **Lambdas**, **Optionals**, and **Method References**, the **College Management System** becomes more concise and functional. These features improve code readability and make it easier to work with collections of data while reducing boilerplate code. The result is a clean and modern Java-based system that manages students, faculty, courses, grades, and exams efficiently.