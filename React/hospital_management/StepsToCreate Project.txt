To create a new React project for your **Hospital Management** system using `npm`, follow these steps:

### 1. **Install Node.js (if not installed)**
   - Download and install Node.js from [Node.js official site](https://nodejs.org/)
   - Verify installation:
     ```sh
     node -v
     npm -v
     ```

### 2. **Create React App**
Run the following command to create a new React project named `hospital_management`:

```sh
npx create-react-app hospital_management
```

OR, if you prefer **Vite** (which is faster and better for performance):

```sh
npm create vite@latest hospital_management --template react
```

### 3. **Navigate to the Project Directory**
```sh
cd hospital_management
```

### 4. **Install Dependencies (Optional)**
For UI components, state management, and other utilities:
```sh
npm install react-router-dom axios tailwindcss @reduxjs/toolkit react-redux
```

### 5. **Start the Development Server**
```sh
npm start
```
or for Vite:
```sh
npm run dev
```

Now, your React-based **Hospital Management** system is up and running! üöÄ Let me know if you need help with specific features.



 **React components and services** for CRUD operations related to `Patient`, following your folder structure.

### üìÅ **Project Structure**
```
src/
‚îÇ‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ patient/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PatientList.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AddPatient.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EditPatient.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ViewPatient.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PatientForm.js
‚îÇ‚îÄ‚îÄ services/
‚îÇ   ‚îú‚îÄ‚îÄ PatientServices.js
‚îÇ‚îÄ‚îÄ App.js
‚îÇ‚îÄ‚îÄ index.js
‚îÇ‚îÄ‚îÄ App.css
```

---

### 1Ô∏è‚É£ **PatientServices.js** (Handles API Calls)
üìå Located in `src/services/PatientServices.js`
```javascript
import axios from "axios";

const BASE_URL = "http://localhost:8080/api/patients"; // Change according to your backend API

class PatientServices {
  getPatients() {
    return axios.get(BASE_URL);
  }

  addPatient(patient) {
    return axios.post(BASE_URL, patient);
  }

  getPatientById(id) {
    return axios.get(`${BASE_URL}/${id}`);
  }

  updatePatient(id, patient) {
    return axios.put(`${BASE_URL}/${id}`, patient);
  }

  deletePatient(id) {
    return axios.delete(`${BASE_URL}/${id}`);
  }
}

export default new PatientServices();
```

---

### 2Ô∏è‚É£ **PatientList.js** (Displays All Patients)
üìå Located in `src/components/patient/PatientList.js`
```javascript
import React, { useEffect, useState } from "react";
import PatientServices from "../../services/PatientServices";
import { useNavigate } from "react-router-dom";
import "../../App.css";

const PatientList = () => {
  const [patients, setPatients] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    loadPatients();
  }, []);

  const loadPatients = () => {
    PatientServices.getPatients()
      .then((response) => {
        setPatients(response.data);
      })
      .catch((error) => {
        console.error("Error fetching patients:", error);
      });
  };

  const deletePatient = (id) => {
    PatientServices.deletePatient(id).then(() => loadPatients());
  };

  return (
    <div className="container">
      <h2>Patient List</h2>
      <button onClick={() => navigate("/add-patient")} className="btn">
        Add Patient
      </button>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>DOB</th>
            <th>Age</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {patients.map((patient) => (
            <tr key={patient.id}>
              <td>{patient.id}</td>
              <td>{patient.firstName}</td>
              <td>{patient.lastName}</td>
              <td>{patient.dob}</td>
              <td>{patient.age}</td>
              <td>
                <button onClick={() => navigate(`/edit-patient/${patient.id}`)}>Edit</button>
                <button onClick={() => deletePatient(patient.id)}>Delete</button>
                <button onClick={() => navigate(`/view-patient/${patient.id}`)}>View</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default PatientList;
```

---

### 3Ô∏è‚É£ **AddPatient.js & EditPatient.js**
üìå Located in `src/components/patient/AddPatient.js` and `EditPatient.js`

Both components will reuse **PatientForm.js**, ensuring cleaner code.

#### **PatientForm.js** (Reused in Add & Edit)
```javascript
import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import PatientServices from "../../services/PatientServices";

const PatientForm = ({ isEdit }) => {
  const [patient, setPatient] = useState({ firstName: "", lastName: "", dob: "", age: "" });
  const { id } = useParams();
  const navigate = useNavigate();

  useEffect(() => {
    if (isEdit) {
      PatientServices.getPatientById(id).then((res) => setPatient(res.data));
    }
  }, [isEdit, id]);

  const handleChange = (e) => {
    setPatient({ ...patient, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (isEdit) {
      PatientServices.updatePatient(id, patient).then(() => navigate("/"));
    } else {
      PatientServices.addPatient(patient).then(() => navigate("/"));
    }
  };

  return (
    <div className="container">
      <h2>{isEdit ? "Edit Patient" : "Add Patient"}</h2>
      <form onSubmit={handleSubmit}>
        <input type="text" name="firstName" placeholder="First Name" value={patient.firstName} onChange={handleChange} required />
        <input type="text" name="lastName" placeholder="Last Name" value={patient.lastName} onChange={handleChange} required />
        <input type="date" name="dob" value={patient.dob} onChange={handleChange} required />
        <input type="number" name="age" placeholder="Age" value={patient.age} onChange={handleChange} required />
        <button type="submit">{isEdit ? "Update" : "Submit"}</button>
      </form>
    </div>
  );
};

export default PatientForm;
```

#### **AddPatient.js**
```javascript
import React from "react";
import PatientForm from "./PatientForm";

const AddPatient = () => <PatientForm isEdit={false} />;

export default AddPatient;
```

#### **EditPatient.js**
```javascript
import React from "react";
import PatientForm from "./PatientForm";

const EditPatient = () => <PatientForm isEdit={true} />;

export default EditPatient;
```

---

### 4Ô∏è‚É£ **ViewPatient.js** (View Patient Details)
```javascript
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import PatientServices from "../../services/PatientServices";

const ViewPatient = () => {
  const { id } = useParams();
  const [patient, setPatient] = useState({});
  const navigate = useNavigate();

  useEffect(() => {
    PatientServices.getPatientById(id).then((res) => setPatient(res.data));
  }, [id]);

  return (
    <div className="container">
      <h2>Patient Details</h2>
      <p><strong>First Name:</strong> {patient.firstName}</p>
      <p><strong>Last Name:</strong> {patient.lastName}</p>
      <p><strong>DOB:</strong> {patient.dob}</p>
      <p><strong>Age:</strong> {patient.age}</p>
      <button onClick={() => navigate("/")}>Back</button>
    </div>
  );
};

export default ViewPatient;
```

---

### 5Ô∏è‚É£ **App.css** (Basic CSS)
```css
.container {
  width: 50%;
  margin: auto;
  text-align: center;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid black;
  padding: 10px;
}

button {
  margin: 5px;
  padding: 8px 12px;
  cursor: pointer;
}
```

---

### 6Ô∏è‚É£ **Routing in App.js**
```javascript
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import PatientList from "./components/patient/PatientList";
import AddPatient from "./components/patient/AddPatient";
import EditPatient from "./components/patient/EditPatient";
import ViewPatient from "./components/patient/ViewPatient";

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<PatientList />} />
        <Route path="/add-patient" element={<AddPatient />} />
        <Route path="/edit-patient/:id" element={<EditPatient />} />
        <Route path="/view-patient/:id" element={<ViewPatient />} />
      </Routes>
    </Router>
  );
}

export default App;
```

This completes your **CRUD Patient Management System**! üöÄ Let me know if you need further enhancements. üòä